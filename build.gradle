/*apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'nebula.provided-base'*/

buildscript {
    repositories {
        mavenCentral()
        maven { url "http://google-diff-match-patch.googlecode.com/svn/trunk/maven" }
    }
}

plugins {
    id 'io.franzbecker.gradle-lombok' version '1.14'
    id 'java'
    id 'application'
    id 'idea'
}

lombok {
	version = '1.18.4'
	sha256 = ""
}

version = '2.0.00'  // same as in src/main/resources/resources/version.info

mainClassName = "soc.client.SOCPlayerClient"

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'  // override the system's default encoding
        // To test that this has an effect, use 'Cp1252' instead here and expect "unmappable character" errors in StringUtil.java
}

tasks.withType(Jar) {
    includeEmptyDirs = false
}

jar.enabled = false  // prevent default jsettlers.git-<version>.jar artifact creation
distZip.enabled = false   // TODO revisit later, with more control over contents
distTar.enabled = false   // TODO revisit later, with more control over contents

task serverJar(type: Jar) {
    baseName = 'JSettlersServer'
    version = project.version
    manifest {
        attributes(
            'Main-Class': 'soc.server.SOCServer'
        )
    }
    from(sourceSets.main.output) {
        include "net/nand/util/i18n/mgr/**"
        include "soc/baseclient/**"
        include "soc/debug/**"
        include "soc/disableDebug/**"
        include "soc/game/**"
        include "soc/message/**"
        include "soc/robot/**"
        include "soc/server/**"
        include "soc/util/**"
    }
    from(sourceSets.main.resources) {
        include "resources/version.info"
        include "resources/strings/server/**"
    }
}

task fullJar(type: Jar) {
    baseName = 'JSettlers'
    version = project.version
    manifest {
        attributes(
            'Main-Class': 'soc.client.SOCPlayerClient'
        )
    }
    from(sourceSets.main.output) {
        include "net/nand/util/i18n/mgr/**"
        include "soc/**"
    }
    from(sourceSets.main.resources) {
        include "**"
    }
}

task fastJar(type: Jar) {
    baseName = 'JSettlersNN_dialogue_nocuda'
    version = project.version
    manifest {
        attributes(
            'Main-Class': 'fasttester.BotServer'
        )
    }
    from(sourceSets.main.output) {
        include "fasttester/**"
        include "soc/**"
    }
    from(sourceSets.main.resources) {
        include "**"
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

// TODO i18neditor (see build.xml build-i18neditor)

repositories {
    mavenCentral()
}
//
//jar {
//    into 'resources', {
//        from 'resources'
//    }
//}

dependencies {
   /* testCompile 'junit:junit:4.12'
    compile "org.deeplearning4j:rl4j-core:1.0.0-beta2"
    compile "org.deeplearning4j:deeplearning4j-core:1.0.0-beta2"
    compile "org.deeplearning4j:deeplearning4j-nn:1.0.0-beta2"
    compile "org.nd4j:nd4j-cuda-8.0-platform:1.0.0-beta2"
    compile "org.datavec:datavec-api:1.0.0-beta2"*/
    
    
    
    compile "org.deeplearning4j:rl4j-core:1.0.0-beta3"
    compile "org.deeplearning4j:deeplearning4j-core:1.0.0-beta3"
    compile "org.deeplearning4j:deeplearning4j-nn:1.0.0-beta3"
    compile "org.nd4j:nd4j-native-platform:1.0.0-beta3"
    compile "org.datavec:datavec-api:1.0.0-beta3"
}

artifacts {
    archives serverJar, fullJar
}
